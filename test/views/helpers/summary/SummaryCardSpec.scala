/*
 * Copyright 2024 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package views.helpers.summary

import base.Injector
import play.twirl.api.Html
import uk.gov.hmrc.govukfrontend.views.html.components.GovukSummaryList
import uk.gov.hmrc.govukfrontend.views.viewmodels.content.Text
import uk.gov.hmrc.govukfrontend.views.viewmodels.summarylist._
import views.common.UnitViewSpec
import views.html.summary.summary_card

/*
  This test asserts that, by using a single SummaryList, our "Summary" Card implementation generates a template consisting
  of the same Html and CSS classes as the one generated by using the Card implementation provided by play-frontend-hmrc.
  We needed a different implementation as our service requires Cards potentially containing more than one SummaryList.
  What's more the SummaryLists might be prefixed, meaning before the first Html tag of a SummaryList, with specific heading tags (H3).
 */
class SummaryCardSpec extends UnitViewSpec with Injector {

  private val summaryCard = instanceOf[summary_card]
  private val govukSummaryList = instanceOf[GovukSummaryList]

  "summary_card" should {
    "generate the same template generated by directly using play-frontend-hmrc" in {
      val card = Card(Some(CardTitle(Text("title"))))

      val rows = List(SummaryListRow(Key(Text("key")), Value(Text("value"))))

      val actualHtml = summaryCard(card, List(SummarySection(rows)))
      val expectedHmtl = govukSummaryList(SummaryList(rows, Some(card)))

      normalize(actualHtml) mustBe normalize(expectedHmtl)
    }
  }

  private def normalize(html: Html): String =
    html.toString.trim
      .replaceAll("[\\s+]?\n+[\\s+]?", "")
      .replaceAll("> +", ">")
      .replaceAll(" +<", "<")
}
